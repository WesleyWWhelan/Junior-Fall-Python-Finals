from os import path
import os
import random
import pygame
import neat
# import neat.config
# from neat import config
from pygame import image, transform, display, QUIT, quit, event, mask

pygame.font.init()

w_width = 600
w_height = 600
bird_pics = [transform.scale2x(image.load(path.join("imgs", "bird1.png"))),
             transform.scale2x(image.load(path.join("imgs", "bird2.png"))),
             transform.scale2x(image.load(path.join("imgs", "bird3.png")))]
pipe_pic = transform.scale2x(image.load(path.join("imgs", "pipe.png")))
bg_pic = transform.scale2x(image.load(path.join("imgs", "bg.png")))
base_pic = transform.scale2x(image.load(path.join("imgs", "base.png")))

stat_font = pygame.font.SysFont('comicsans', 50)


class Bird:
    pics = bird_pics
    rotation = 25
    r_vel = 20
    anim_time = 5

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.tilt = 0
        self.tick_count = 0
        self.vel = 0
        self.height = self.y
        self.pic_count = 0
        self.pic = self.pics[0]

    def jump(self):
        self.vel = -10.5
        self.tick_count = 0
        self.height = self.y

    def move(self):
        self.tick_count += 1

        d = self.vel * self.tick_count + 1.5 * self.tick_count ** 2
        if d >= 16:
            d = 16

        if d < 0:
            d -= 2

        self.y = self.y + d

        if d < 0 or self.y < self.height + 50:
            if self.tilt < self.rotation:
                self.tilt = self.rotation

        else:
            if self.tilt > -90:
                self.tilt -= self.r_vel

    def draw(self, win):
        self.pic_count += 1

        if self.pic_count < self.anim_time:
            self.pic = self.pics[0]
        elif self.pic_count < self.anim_time * 2:
            self.pic = self.pics[1]
        elif self.pic_count < self.anim_time * 3:
            self.pic = self.pics[2]
        elif self.pic_count < self.anim_time * 4:
            self.pic = self.pics[1]
        elif self.pic_count == self.anim_time * 4 + 1:
            self.pic = self.pics[0]
            self.pic_count = 0

        if self.tilt <= -80:
            self.pic = self.pics[1]
            self.pic_count = self.anim_time * 2

        rotated_image = transform.rotate(self.pic, self.tilt)
        new_rect = rotated_image.get_rect(center=self.pic.get_rect(topleft=(self.x, self.y)).center)
        win.blit(rotated_image, new_rect.topleft)

    def get_mask(self):
        return pygame.mask.from_surface(self.pic)


class Pipe:
    gap = 200
    p_vel = 5

    def __init__(self, x):
        self.x = x
        self.height = 0
        self.top = 0
        self.bottom = 0
        self.pipe_top = pygame.transform.flip(pipe_pic, False, True)
        self.pipe_bottom = pipe_pic

        self.passed = False
        self.set_height()

    def set_height(self):
        self.height = random.randrange(50, 450)
        self.top = self.height - self.pipe_top.get_height()
        self.bottom = self.height + self.gap

    def move(self):
        self.x -= self.vel

    def draw(self, win):
        win.blit(self.pipe_top, (self.x, self.top))
        win.blit(self.pipe_bottom, (self.x, self.bottom))

    def collide(self, bird):
        bird_mask = bird.get_mask()
        top_mask = pygame.mask.from_surface(self.pipe_top)
        bottom_mask = pygame.mask.from_surface(self.pipe_bottom)

        top_offset = (self.x - bird.x, self.top - round(bird.y))
        bottom_offset = (self.x - bird.x, self.bottom - round(bird.y))

        overlap_bottom = bird_mask.overlap(bottom_mask, bottom_offset)
        overlap_top = bird_mask.overlap(top_mask, top_offset)

        if overlap_bottom or overlap_top:
            return True
        return False


class Base:
    vel = 5
    width = base_pic.get_width()
    pic = base_pic

    def __init__(self, y):

        self.y = y
        self.x1 = 0
        self.x2 = self.width

    def move(self):

        self.x1 -= self.vel
        self.x2 -= self.vel

        if self.x1 + self.width < 0:
            self.x1 = self.x2 + self.width

        if self.x2 + self.width < 0:
            self.x2 = self.x1 + self.width

    def draw(self, win):

        win.blit(self.pic, (self.x1, self.y))
        win.blit(self.pic, (self.x2, self.y))


def draw_window(win, birds, pipes, base, score):
    win.blit(bg_pic, (0, 0))
    for pipe in pipes:
        pipe.draw(win)

    text = stat_font.render("Score:" + str(score), 1, (255, 255, 255))
    win.blit(text, w_width - 10 - text.get_width(), 10)

    base.draw(win)
    for bird in birds:
        bird.draw(win)
    pygame.display.update()


def evaluation(genomes, config):
    nets = []
    ge = []
    birds = []

    for _, g in genomes:
        net = neat.nn.FeedForwardNetwork.create(g, network)
        nets.append(net)
        birds.append(Bird(230, 350))
        g.fitness = 0
        ge.append(g)

    base = Base(730)
    pipes = [Pipe(700)]
    win = display.set_mode((w_width, w_height))
    clock = pygame.time.Clock()

    run = True
    while run:
        clock.tick(30)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                quit()
        pipe_ind = 0
        if len(birds) > 0:
            if len(pipes) > 1 and birds[0].x > pipes[0].x + pipes[0].pipe_top.get_width():
                pipe_ind = 1
        else:
            run = False
            break

        for x, bird in enumerate(birds):
            bird.move()
            ge[x].fitness += 0.1
            output = nets[x].activate(
                (bird.y, abs(bird.y - pipes[pipe_ind].height), abs(bird.y - pipes[pipe_ind].bottom)))
            if output[0] > 0.5:
                bird.jump()

        rem = []
        add_pipe = False
        for pipe in pipes:

            for b, bird in enumerate(birds):

                if pipe.collide(bird):
                    ge[b].fitness -= 1
                    birds.pop(b)
                    nets.pop(b)
                    ge.pop(b)

                if pipe.passed and pipe.x < bird.x:
                    pipe.passed = True
                    add_pipe = True

            if pipe.x + pipe.pipe_top.get_width < 0:
                rem.append(pipe)

        if add_pipe:
            score += 1
            for g in ge:
                g.fitness += 5
            pipes.append(Pipe(600))

        for r in rem:
            pipes.remove(r)
            pipe.move()

        for x, bird in enumerate(birds):
            if bird.y + bird.pic.get_height >= 730 or bird.y < 0:
                birds.pop(x)
                nets.pop(x)
                ge.pop(x)

        base.move()
        draw_window(win, birds, pipes, base, score)


def run(config_path):
    config = neat.config.Config(neat.DefaultGenome, neat.DefaultReproduction,
                                neat.DefaultSpeciesSet, neat.DefaultStagnation,
                                config_path)

    p = neat.Population(config)

    p.add_reporter(neat.StdOutReporter(True))
    stats = neat.StatisticsReporter()
    p.add_reporter(stats)

    winner = p.run(50)


if __name__ == "__main__":
    local_dir = os.path.dirname(__file__)
    config_path = os.path.join(local_dir, "config_1.txt")
    run(config_path)

evaluation()
